import random
import string

class PasswordGenerator:
    def _init_(self, length=12, include_uppercase=True, include_digits=True, include_special=True):
        self.length = length
        self.include_uppercase = include_uppercase
        self.include_digits = include_digits
        self.include_special = include_special

        # Create the pool of characters based on user preferences
        self.character_pool = string.ascii_lowercase
        if self.include_uppercase:
            self.character_pool += string.ascii_uppercase
        if self.include_digits:
            self.character_pool += string.digits
        if self.include_special:
            self.character_pool += string.punctuation

        # Ensure minimum length and constraints
        if self.length < 8:
            raise ValueError("Password length should be at least 8 characters")

        if not (self.include_uppercase or self.include_digits or self.include_special):
            raise ValueError("At least one character type must be included")

    def generate_password(self):
        password = ''.join(random.choice(self.character_pool) for _ in range(self.length))
        return password

    def generate_secure_password(self):
        # Ensure the password contains at least one of each selected character type
        if self.include_uppercase:
            password = [random.choice(string.ascii_uppercase)]
        else:
            password = []

        if self.include_digits:
            password.append(random.choice(string.digits))

        if self.include_special:
            password.append(random.choice(string.punctuation))

        # Fill the rest of the password length with random characters from the pool
        remaining_length = self.length - len(password)
        if remaining_length > 0:
            password += [random.choice(self.character_pool) for _ in range(remaining_length)]

        # Shuffle to avoid predictable sequences
        random.shuffle(password)
        return ''.join(password)

# Example usage
if _name_ == "_main_":
    try:
        length = int(input("Enter the desired password length (minimum 8 characters): "))
        include_uppercase = input("Include uppercase letters? (yes/no): ").strip().lower() == 'yes'
        include_digits = input("Include digits? (yes/no): ").strip().lower() == 'yes'
        include_special = input("Include special characters? (yes/no): ").strip().lower() == 'yes'

        password_gen = PasswordGenerator(
            length=length,
            include_uppercase=include_uppercase,
            include_digits=include_digits,
            include_special=include_special
        )

        # Generate and display the password
        secure_password = password_gen.generate_secure_password()
        print(f"Generated password: {secure_password}")

    except ValueError as e:
        print(e)
